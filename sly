#!/usr/bin/env bash

# Variables
slyfile='Slyfile'

## Colors
red=31
green=32
yellow=33
cyan=36
bold=$(tput smul)
reset=$(tput sgr0)


# Utils
sly_print_color() {
  printf "\e[%sm%s\e[m" "$1" "$2"
}

sly_prepend() {
  color="${2-$yellow}"
  prefix="$(sly_print_color "$color" "$(printf "%-3s | " "${1-SLY}")")"
  while IFS= read line; do
    echo -e "${prefix}${line}"
  done
}

sly_error() {
  \printf '\a%s\n' "$1" | sly_prepend "SLY ERROR" $red >&2
}

sly_has_slyfile() {
  [ -f "$slyfile" ]
}

sly_no_slyfile() {
  sly_error "$slyfile not found"
  sly_error "Create one with ${bold}sly --init${reset}"
  exit 1
}

sly_available_functions() {
  if sly_has_slyfile; then
    source "$slyfile"
    declare -F | awk '{print $NF}' | sort | egrep -v "^sly_"
  else
    sly_no_slyfile
  fi
}


# Commands
sly_exec() {
  if sly_has_slyfile; then
    has_short_fn="$(grep -E "^${1}\s*\(\)" "$slyfile")"
    has_long_fn="$(grep -E "^function\s+${1}" "$slyfile")"
    if [ -z "$has_short_fn" ] && [ -z "$has_long_fn" ]; then
      sly_error "$slyfile has no function called ${bold}${1}${reset}"
      exit 1
    fi

    source "$slyfile"
  else
    sly_no_slyfile
  fi

  if [ -z "$(command -v $1)" ]; then
    sly_error "$slyfile has no function called ${bold}${1}${reset}"
    exit 1
  fi

  echo "Executing function: ${bold}${1}${reset}" | sly_prepend
  declare -f  $1 | sly_prepend

  # $@ 2>&1 | sly_prepend "SLY"
  $@
}

sly_help() {
  cat << SLY | sly_prepend
   ::     .
   mMs/:-oy:
   dMMMMMMh.
  :MMMMMMMy\`
  hMMMMMMN//+///--::-:.---..
  dMMMMMMMMMMMMMMMMMMmmMMMMNmdys+/:-..-+
  dMMMMMMMM $(sly_print_color "$yellow" "SLY") MMMMMMMNNMMMMMMMMMMMNNm/
  -dMMMMMMMMMMMMMMMMMMMh.+sydmMMMMNmh/.
   \`/hMMmMMMMmmmMMMNMMMN-   \`..--..\`
     oMh\`+MM+\`\`\`ohNdohNMNy/\`
    \`md\`  mN     \`Nd\` \`.-hM/
   :yN.   Nm   .+hN.     \`mm\`
  .oo:  /mm/   \`::/      /s+

SLY
  echo "Sly - a CLI tool utilizing plain Bash functions" | sly_prepend
  echo "~~~" | sly_prepend
  echo "" | sly_prepend
  echo "Usage: sly COMMAND [ARGUMENTS]" | sly_prepend
  echo "Options:" | sly_prepend
  echo "    -h --help     Show this message" | sly_prepend
  echo "    -i --init     Initialize an empty ${slyfile}" | sly_prepend
  echo "    -l --list     List available commands" | sly_prepend
  exit 0
}

sly_init() {
  if sly_has_slyfile; then
    sly_error "$slyfile already exists"
    exit 1
  fi

  cat << SLY > $slyfile
# -*- mode: sh; -*- vim: set ft=sh:
#
### $slyfile - used by sly
### https://github.com/richarddewit/sly
#
# Add your functions below. They may contain any Bash code.
# Example:
#
#   ping_home() {
#     ping -c \${1-5} 127.0.0.1
#     screenfetch
#   }
#
# Then run it with \`sly ping_home 10\` to do 10 pings to localhost and
# run \`screenfetch\` afterwards.


SLY
  echo "Sly initialised into $(pwd)/$slyfile" | sly_prepend
  echo "Go add some functions to the $slyfile!" | sly_prepend
  exit 0
}

sly_list() {
  echo "Available commands:" | sly_prepend
  echo "" | sly_prepend
  sly_available_functions | sly_prepend
  exit 0
}


# Execution
[ -z "$1" ] && sly_error "Missing argument COMMAND" && exit 1
[[ "$1" =~ ^sly_ ]] && sly_error "The sly_ prefix is reserved for sly internal functions" && exit 1
[[ "$1" =~ ^(-h|--help)$ ]] && sly_help
[[ "$1" =~ ^(-i|--init)$ ]] && sly_init
[[ "$1" =~ ^(-l|--list)$ ]] && sly_list

(sly_exec $@)
